.title Checkout
.sub-title Please enter your shipping and billing information
.container
  .columns.alpha.six{"data-hook" => "billing_fieldset_wrapper"}
    %fieldset#billing{"data-hook" => ""}

      = form.fields_for :bill_address do |f|
        %legend= t(:billing_address)
        .inner{"data-hook" => "billing_inner"}
          #bfirstname.field
            = f.label :firstname
            = f.text_field :firstname, :class => 'required'
            %span.required *
          #blastname.field
            = f.label :lastname
            = f.text_field :lastname, :class => 'required'
            %span.required *

          -if Spree::Config[:company]
            .field#bcompany
              = f.label :company, t(:company)
              = f.text_field :company

          #baddress1.field
            = f.label :address1, t(:street_address)
            = f.text_field :address1, :class => 'required'
            %span.required *
          #baddress2.field
            = f.label :address2, t(:street_address_2)
            = f.text_field :address2
          #bcity.field
            = f.label :city, t(:city)
            = f.text_field :city, :class => 'required'
            %span.required *
          #bcountry.field
            = f.label :country_id, t(:country)
            %span#bcountry
              = f.collection_select :country_id, available_countries, :id, :name, {}, {:class => 'required'}

            %span.required *

          #bstate.field
            = f.label :state, t(:state)
            = f.text_field :state_name, :class => 'required'
            %span.required*

          /
          / -if Spree::Config[:address_requires_state]
          /   %p.field#bstate
          /     -have_states = !@order.bill_address.country.states.empty?
          /     = f.label :state, t(:state)
          /       %span.required*
          /       %br/
          /     %noscript
          /       = f.text_field :state_name, :class => 'required'
          /
          /     state_elements = [
          /       f.collection_select(:state_id, @order.bill_address.country.states,
          /                           :id, :name,
          /                           {:include_blank => true},
          /                           {:class => have_states ? 'required' : 'hidden',
          /                           :disabled => !have_states}) +
          /        f.text_field(:state_name,
          /                           :class => !have_states ? 'required' : 'hidden',
          /                           :disabled => have_states)
          /        ].join.gsub('"', "'").gsub("\n", "")
          /
          /     = javascript_tag :defer => 'defer' do
          /       document.write("== state_elements");
          /

          #bzipcode.field
            = f.label :zipcode, t(:zip)
            = f.text_field :zipcode, :class => 'required'
            %span.required *
          #bphone.field
            = f.label :phone, t(:phone)
            = f.phone_field :phone, :class => 'required'
            %span.required *
          - if Spree::Config[:alternative_billing_phone]
            #baltphone.field
              = f.label :alternative_phone, t(:alternative_phone)
              = f.phone_field :alternative_phone
  .columns.omega.six{"data-hook" => "shipping_fieldset_wrapper"}
    %fieldset#shipping{"data-hook" => ""}
      = form.fields_for :ship_address do |s|
        %legend= t(:shipping_address)
        .inner{"data-hook" => "shipping_inner"}
          .field.checkbox{"data-hook" => "use_billing"}
            = check_box_tag 'order[use_billing]', '1', (!(@order.bill_address.empty? && @order.ship_address.empty?) && @order.bill_address.same_as?(@order.ship_address))
            = label_tag :order_use_billing, t(:use_billing_address), :id => 'use_billing'

          #sfirstname.field
            = s.label :firstname, t(:first_name)
            = s.text_field :firstname, :class => 'required'
            %span.required *
          #slastname.field
            = s.label :lastname, t(:last_name)
            = s.text_field :lastname, :class => 'required'
            %span.required *
          - if Spree::Config[:company]
            #scompany.field
              = s.label :company, t(:company)
              = s.text_field :company
          #saddress1.field
            = s.label :address1, t(:street_address)
            = s.text_field :address1, :class => 'required'
            %span.required *
          #saddress2.field
            = s.label :address2, t(:street_address_2)
            = s.text_field :address2
          #scity.field
            = s.label :city, t(:city)
            = s.text_field :city, :class => 'required'
             %span.required *
          #scountry.field
            = s.label :country_id, t(:country)
            %span#scountry
              = s.collection_select :country_id, available_countries, :id, :name, {}, {:class => 'required'}

            %span.required *


          #sstate.field
            = s.label :state, t(:state)
            = s.text_field :state_name, :class => 'required'
            %span.required*
        /
        / - if Spree::Config[:address_requires_state]
        /  %p.fieldid#sstate
        /     -have_states = !@order.ship_address.country.states.empty?
        /     = s.label :state, t(:state)
        /     %span.required*
        /     %br/
        /     %noscript
        /       = s.text_field :state_name, :class => 'required'
        /
        /     -state_elements = [
        /        s.collection_select(:state_id, @order.ship_address.country.states,
        /                           :id, :name,
        /                           {:include_blank => true},
        /                           {:class => have_states ? 'required' : 'hidden',
        /                           :disabled => !have_states}) +
        /        s.text_field(:state_name,
        /                           :class => !have_states ? 'required' : 'hidden',
        /                           :disabled => have_states)
        /        ].join.gsub('"', "'").gsub("\n", "")
        /
        /     = javascript_tag :defer => 'defer' do
        /       document.write("== state_elements");
        /
          #szipcode.field
            = s.label :zipcode, t(:zip)
            = s.text_field :zipcode, :class => 'required'
            %span.required *
          #sphone.field
            = s.label :phone, t(:phone)
            = s.phone_field :phone, :class => 'required'
            %span.required

    .form-buttons{"data-hook" => "buttons"}
      .submit
        = submit_tag t(:save_and_continue), :class => 'button primary orange', :title => 'Save & Continue', :style => 'width: 200px'